// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  phone          String        @unique
  password       String
  role           Roles         @default(USER)
  image          String?
  address        String?
  department     String?
  designation    String?
  position       Json? // Store as { lat: number, lng: number }
  status         UserStatus    @default(ACTIVE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isDeleted      Boolean       @default(false)
  fcm_token      String?
  locationId     Int?
  ActivityLog    ActivityLog[]
  activityId     Int?
  lastActivity   DateTime?
  activityStatus String? // e.g., "Checked-In", "Checked-Out"
  activityPlace  String?
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  action    String // e.g., "login", "signup", "reset_password"
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + INTERVAL '5 minutes'"))
}

model Setting {
  id           Int      @id @default(autoincrement())
  site_name    String?
  site_email   String?
  site_address String?
  site_footer  String?
  site_phone   String?
  site_logo    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  position  String // Will be geometry(Point, 4326) in the DB
  lat       Float
  lng       Float
  image     String?
  isDeleted Boolean  @default(false)
  maxRadius Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurrentPlace {
  id        Int      @id @default(autoincrement())
  name      String
  type      String? // e.g., "common", "additional",
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id              Int       @id @default(autoincrement())
  checkedInTime   DateTime
  checkedInPlace  Json // Store as { address: string, position: { lat: number, lng: number } }
  checkedOutTime  DateTime?
  checkedOutPlace Json? // Store as { address: string, position: { lat: number, lng: number } }
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  action          String // e.g., "Checked-In", "Checked-Out"
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EmailLog {
  id             Int      @id @default(autoincrement())
  recipientEmail String
  recipientName  String?
  subject        String
  body           String   @db.Text
  senderEmail    String
  senderName     String?
  senderType     String // "firebase" or "admin"
  emailId        String? // External email service ID
  status         String   @default("sent") // "sent", "failed", "pending"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Roles {
  USER
  ADMIN
  SUPER_ADMIN
}
